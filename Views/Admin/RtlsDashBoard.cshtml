@using A8PlatForm.Domains.A8AdminModel
@model Site
<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Custom Theme Style -->
    <link href="~/build/css/custom.min.css" rel="stylesheet">
    <link href="~/Style/DropDown.css" rel="stylesheet" />
    <link href="~/build/css/custom.css" rel="stylesheet" />
</head>
<body class="nav-md">
    <div class="container body">
        <div class="main_container">
            @Html.Partial("~/Views/Shared/_LeftMenu.cshtml")
            <div class="right_col" role="main" style="height:1800px">
                <div class="FloorDiv form-group col-lg-12">
                    <select id="ddlSelectedFloor" class="Form-control col-sm-4 col-md-4 col-lg-4" onchange="LoadFloorImageAsPerFloor(this.value)"></select>
                    <h2 id="markposition" class="pull-right"></h2>
                </div>
                <br />
                <div class="topCanvas">
                    <div id="divCanvas0" style="float:left">
                        <canvas id="Canvas0"></canvas>
                    </div>
                    <div id="divCanvas1" style="float:left">
                        <canvas id="Canvas1"></canvas>
                    </div>
                    <div id="divCanvas2" style="float:left">
                        <canvas id="Canvas2"></canvas>
                    </div>
                    <div id="divCanvas3" style="float:left">
                        <canvas id="Canvas3"></canvas>
                    </div>
                    <div id="divCanvas4" style="float:left">
                        <canvas id="Canvas4"></canvas>
                    </div>
                    <div id="Canvas5" style="float:left">
                        <canvas id="Canvas5"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
<!--Script references. -->
<!--Reference the jQuery library. -->
<script src="~/Scripts/jquery-1.6.4.min.js"></script>
<!-- jQuery -->
<script src="../vendors/jquery/dist/jquery.min.js"></script>
<script src="../vendors/bootstrap/dist/js/bootstrap.min.js"></script>
<script src="../vendors/bootstrap-progressbar/bootstrap-progressbar.min.js"></script>
<!-- Custom Theme Scripts -->
<script src="../build/js/custom.min.js"></script>
<!--Reference the SignalR library. -->
<script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
<!--Reference the autogenerated SignalR hub script. -->
<script src="@Model.RtlsWebSocketUrl/signalr/hubs"></script>
<!--Add script to update the page and send messages.-->

<script type="text/javascript">

    var arrSiteFloor = [];
    var ScalingFactorX=0;
    var ScalingFactorY=0;
    var imagesOK=0;
    var imagesFailed=0;
    var globalInt=0;

    function GetContextOfCanvas(objCanvas)
    {
       return objCanvas.getContext("2d");
    }


    function LoadFloorImageAsPerFloor()
    {
        //context.drawImage(img, 0, 0, 600, 800);
        for(var i=0;i<arrSiteFloor.length;i++)
        {
            var CanvasIdCustom="Canvas"+i;
            //Need to get the Floor Name and as per that load the ImagePath of the particular Floor
            var Index = arrSiteFloor.findIndex(x => x.CanvasName == CanvasIdCustom);
            var objFromArray = arrSiteFloor[Index];

            fill_canvas(objFromArray.FloorImagePath,objFromArray.CanvasXLength,objFromArray.CanvasYLength,CanvasIdCustom);

            var canvid="#divCanvas"+i;
            $(canvid).css('margin-left',objFromArray.LeftStyle+"px");
            $(canvid).css('margin-top',objFromArray.TopStyle+"px");

            //Then we need to calculate the Scaling factor of the Image
            ScalingFactorX=objFromArray.CanvasXLength/objFromArray.XRangeFeedData;
            ScalingFactorY=objFromArray.CanvasYLength/objFromArray.YRangeFeedData;
        }
    }

    function fill_canvas(imagePath,width,height,canvasId) {
        // CREATE CANVAS CONTEXT.
        var canvas = document.getElementById(canvasId);
        var ctx = GetContextOfCanvas(canvas);

        var img = new Image();
        img.src = imagePath;
        img.height=height;
        img.width=width;

        //Set the Image Uploaded for the Floor
        img.onload = function () {
            ctx.drawImage(img, 0, 0,width,height);
        };

        canvas.width = img.width;
        canvas.height = img.height;
        // DRAW THE IMAGE TO THE CANVAS.
    }

    var draw = function (x, y, mac, FloorName) {
        var IndexSiteFloor = arrSiteFloor.findIndex(x => x.SiteFloorName == FloorName);
        var objFromArray = arrSiteFloor[IndexSiteFloor];
        console.log(objFromArray);
        var objCanvas=document.getElementById(objFromArray.CanvasName);
        var context=GetContextOfCanvas(objCanvas);


        var img1 = new Image;// First create the image...
        var xPos = x * ScalingFactorX;
        var yPos =  objFromArray.CanvasYLength - (y * ScalingFactorY);

        img1.onload = function () {
            context.drawImage(img1, xPos, yPos, 20, 20);
            var markerText ="Mac:"+mac+" "+"x:"+x+" "+"y:"+y;
            var textMeasurements = context.measureText(markerText);

            context.fillStyle = "#f2f2f2";
            context.globalAlpha = 0.9;
            context.fillRect(xPos - 30, yPos - 10, 90, 15);
            context.globalAlpha = 1;

            // Draw position above
            context.fillStyle = "#474747";
            context.fillText(markerText, xPos - 30, yPos);
        };

        img1.src = '@HttpContext.Current.Request.Url.Scheme' + "://" + '@HttpContext.Current.Request.Url.Authority' + '@HttpContext.Current.Request.ApplicationPath.TrimEnd('/')'+ "/Images/user2.png";
    };

    var myHub = $.connection.MyHub;
    $(function () {
        LoadListData();
        navigation();
        // Declare a proxy to reference the hub.
        $.connection.hub.url = "@Model.RtlsWebSocketUrl/signalr";
        $.connection.hub.logging = true;
        $.connection.hub.start().done(function () {
            alert("Now connected!");
            myHub.server.send('@Model.RtlsPublisherUrl').done(function () {
                console.log("ChatHub.Send completed successfully");
            }).fail(function (error) {
                console.log("ChatHub.Send failed:");
            });
        }).fail(function () {
            alert("Could not Connect!");
        });
    });


    myHub.client.addMessage = function (value) {
        LoadFloorImageAsPerFloor();
        var formArray = JSON.parse(value);
        console.log("Data come from subscriber")
        formArray.forEach(function (item) {
            //console.log(item);
            ////  var formObj=JSON.parse(item);
            //console.log(item.mac);;
            //console.log(item.Floor);
            //console.log(item.x);
            //console.log(item.y);
            draw(item.x, item.y, item.mac, item.fn);
        });
    };

    function LoadListData() {
        var BaseUrl = localStorage.getItem('rtlsUrl') + "/api/GetSiteFloors?SiteId="+@Model.SiteId;
        $.get(BaseUrl,function (data) {
            arrSiteFloor=data.SiteFloors;
            //globalInt=arrSiteFloor[0].Id;
            LoadFloorImageAsPerFloor();
            $.each(arrSiteFloor, function (key, value) {
                $("#ddlSelectedFloor").append($("<option></option>").val(value.Id).html(value.SiteFloorName));
                //$("#chkListFloorDiv").append("<input type='checkbox' id='chk-" + key + "' name='" + value.SiteFloorName+key +"'value='"+ value.Id + "' /> " + value.SiteFloorName);
                //loadCanvas(value.FloorImagePath,canvid,value.CanvasXLength,value.CanvasYLength);
            });
        });
    }

    //function loadCanvas(dataURL,canvasId,width,height) {
    //    var canvas = document.getElementById(canvasId);
    //    var context = canvas.getContext('2d');

    //    // load image from data url
    //    var imageObj = new Image();
    //    imageObj.onload = function() {
    //        context.drawImage(this,0,0,width,height);
    //    };
    //    imageObj.src = dataURL;
    //}

    //function getMousePos(canvas, evt) {
    //    var rect = canvas.getBoundingClientRect();
    //    return {
    //        x: evt.clientX - rect.left,
    //        y: evt.clientY - rect.top
    //    };
    //}

    //canvas.addEventListener('mousemove', function (evt) {
    //    var mousePos = getMousePos(canvas, evt);
    //    //var message = 'Mouse position: ' + Math.round(mousePos.x/()) + ',' + Math.round(800 - (mousePos.y));
    //    var message = 'Mouse position: ' +Math.round(mousePos.x /(Canvas.width/276)) + ',' + Math.round((Canvas.height/(Canvas.height/37))-(mousePos.y/(Canvas.height/37)));
    //    var elemntH2 = document.getElementById("markposition");
    //    elemntH2.innerHTML = message;
    //}, false);
</script>


